# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hide.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again. Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QPainter, QColor
import os
import sys
import traceback # Import traceback for detailed error info

# Add the parent directory to the system path to find Whisper modules
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'Whisper')))
# from Whisper.ImageSteganography import ImageSteganography
# from Whisper.steganography import TextSteganography
# from Whisper.AudioTextSteganography import AudioTextSteganography
# from Whisper.Reverse_Crypt import ReverseCrypt

try:
    from Whisper.ImageSteganography import ImageSteganography
    from Whisper.AudioTextSteganography import AudioTextSteganography
    from Whisper.Reverse_Crypt import ReverseCrypt
    from Whisper.steganography import TextSteganography
    from Whisper.StegoTextPass import StegoTextPass
    # If TextSteganography is used for decoding text within images, ensure it's imported.
    # from Whisper.steganography import TextSteganography
except ImportError as e:
    print(f"Error importing steganography modules: {e}")
    print("Please ensure 'Whisper' package and its modules (ImageSteganography.py, AudioTextSteganography.py, Reverse_Crypt.py) are correctly placed and accessible in your Python path.")




def colorize_pixmap(pixmap, color_str):
    """
    Applies a color tint to a QPixmap.
    Useful for recoloring SVG icons.
    """
    if pixmap.isNull():
        return QPixmap() # Return an empty pixmap if the original is null

    tinted = QPixmap(pixmap.size())
    tinted.fill(QtCore.Qt.transparent) # Start with a transparent background

    painter = QPainter(tinted)
    painter.setCompositionMode(QPainter.CompositionMode_Source)
    painter.drawPixmap(0, 0, pixmap) # Draw the original pixmap
    painter.setCompositionMode(QPainter.CompositionMode_SourceIn) # Apply tint only where pixmap has content
    painter.fillRect(tinted.rect(), QColor(color_str)) # Fill with the desired color
    painter.end()

    return tinted


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 700)

        # Get the current script directory for robust path handling
        script_dir = os.path.dirname(os.path.abspath(__file__))

        # Corrected paths for various assets
        # Assuming 'gui' is the parent of 'HideMessage' and 'RevealMessage'
        start_window_imgs_path = os.path.join(script_dir, "..", "StartWindow", "imgs")
        hide_message_imgs_path = os.path.join(script_dir, "..", "HideMessage", "imgs")
        hide_message_icons_path = os.path.join(script_dir, "..", "HideMessage", "icons")

        
        self.MainWindow = MainWindow # Store reference to MainWindow for QFileDialog parent
        MainWindow.setWindowIcon(QtGui.QIcon("gui/StartWindow/imgs/smallW (2).png"))
        MainWindow.setStyleSheet("QMainWindow {\n"
        "    background-color: #2c2c2c; \n"
        "    background-image: url(gui/StartWindow/imgs/DarkBackground.png); \n"
        "}\n"
        "\n"
        "QComboBox {\n"
        "    background-color: #3a3a3a;\n"
        "    color: #f0f0f0;\n"
        "    border: 1px solid #444444;\n"
        "    border-radius: 4px;\n"
        "    min-height: 40px; \n"
        "    padding-left: 10px;\n"
        "}\n"
        "\n"
        "QComboBox:hover {\n"
        "    background-color: #444444;\n"
        "}\n"
        "\n"
        "QComboBox::drop-down {\n"
        "    background-color: #3a3a3a;\n"
        "    border-left: 1px solid #444444;\n"
        "    width: 24px;\n"
        "}\n"
        "\n"
        "QComboBox::down-arrow {\n" 
        "    image: url({os.path.join(hide_message_icons_path, 'down-arrow-5-svgrepo-com.svg').replace(os.sep, '/')});\n" # Use replace for forward slashes in URL
        "    width: 12px;\n"
        "    height: 12px;\n"
        "}\n"

        "QComboBox QAbstractItemView {\n"
        "    background-color: #3a3a3a;\n"
        "    color: #f0f0f0;\n"
        "    selection-background-color: #2c2c2c;\n"
        "    selection-color: #ffffff;\n"
        "    border: 1px solid #444444;\n"
        "    outline: 0;\n"
        "    min-height: 100px;\n"
        "}\n"
        "QComboBox QAbstractItemView::item {\n"
        "     max-height: 60px;\n"
        "     padding: 10px 10px 10px 10px;\n"
        "     margin: 5px;\n"
        "}\n"
        "QComboBox QAbstractItemView::item:hover {\n"
        "     background-color: #505050;\n"
        "     color: white;\n"
        "}\n"
        "")

        # Initialize Steganography classes
        self.text_steganography = ReverseCrypt()
        self.image_steganography = ImageSteganography(num_lsb=1)
        self.textFromimage_steganography = TextSteganography()
        self.audio_steganography = AudioTextSteganography() 
        self.stego_pass = StegoTextPass()

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Logo Big Frame
        self.logoBigFrame = QtWidgets.QFrame(self.centralwidget)
        self.logoBigFrame.setGeometry(QtCore.QRect(0, 10, 900, 71))
        self.logoBigFrame.setStyleSheet("#logoBigFrame {\n"
        "    border: none;\n"
        "    border-bottom: 1px solid #1a1a1a; \n"
        "}")
        self.logoBigFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.logoBigFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.logoBigFrame.setObjectName("logoBigFrame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.logoBigFrame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.logoSmallFrame = QtWidgets.QFrame(self.logoBigFrame)
        self.logoSmallFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.logoSmallFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.logoSmallFrame.setObjectName("logoSmallFrame")
        self.whisperLogo = QtWidgets.QLabel(self.logoSmallFrame)
        self.whisperLogo.setGeometry(QtCore.QRect(30, 10, 130, 41))
        self.whisperLogo.setText("")
        
        # Corrected path for WhisperLogo.png
        whisper_logo_full_path = os.path.join(hide_message_imgs_path, "WhisperLogo.png")
        self.whisperLogo.setPixmap(QtGui.QPixmap(whisper_logo_full_path))
        
        self.whisperLogo.setScaledContents(True)
        self.whisperLogo.setAlignment(QtCore.Qt.AlignCenter)
        self.whisperLogo.setWordWrap(False)
        self.whisperLogo.setObjectName("whisperLogo")
        self.horizontalLayout.addWidget(self.logoSmallFrame)

        # Password Widget and related elements (copied styling from hideMess.py)
        self.passwordWidget = QtWidgets.QWidget(self.centralwidget)
        self.passwordWidget.setGeometry(QtCore.QRect(40, 515, 500, 153))
        self.passwordWidget.setMinimumSize(QtCore.QSize(500, 0))
        self.passwordWidget.setMaximumSize(QtCore.QSize(500, 16777215))
        self.passwordWidget.setObjectName("passwordWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.passwordWidget)
        self.verticalLayout_3.setContentsMargins(11, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.passwordLabel = QtWidgets.QLabel(self.passwordWidget)
        self.passwordLabel.setMinimumSize(QtCore.QSize(59, 30))
        self.passwordLabel.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.passwordLabel.setFont(font)
        # Style from hideMess.py
        self.passwordLabel.setStyleSheet("#passwordLabel {\n"
        "    color: #f0f0f0;  \n"
        "}") # removed background-color: black; which was only in revealContent.py
        self.passwordLabel.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft)
        self.passwordLabel.setObjectName("passwordLabel")
        self.verticalLayout_3.addWidget(self.passwordLabel)
        self.passwordAndButtonsWidget = QtWidgets.QWidget(self.passwordWidget)
        self.passwordAndButtonsWidget.setMaximumSize(QtCore.QSize(805, 16777215))
        self.passwordAndButtonsWidget.setObjectName("passwordAndButtonsWidget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.passwordAndButtonsWidget)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 30)
        self.horizontalLayout_3.setSpacing(128)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.suggestedWidget = QtWidgets.QWidget(self.passwordAndButtonsWidget)
        self.suggestedWidget.setMaximumSize(QtCore.QSize(550, 16777215))
        self.suggestedWidget.setObjectName("suggestedWidget")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.suggestedWidget)
        self.horizontalLayout_7.setContentsMargins(0, 0, 200, 11)
        # self.horizontalLayout_7.setSpacing(45)
        self.horizontalLayout_7.setSpacing(0)
        self.horizontalLayout_7.setStretch(0, 0)  # passwordInputWidget
        self.horizontalLayout_7.setStretch(1, 1) 
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.passwordInputWidget = QtWidgets.QWidget(self.suggestedWidget)
        self.passwordInputWidget.setMinimumSize(QtCore.QSize(300, 50))
        self.passwordInputWidget.setMaximumSize(QtCore.QSize(300, 50))
        self.passwordInputWidget.setStyleSheet("#passwordInputWidget {\n"
        "    border: 1px solid #cecece;\n"
        "    border-radius: 10px;\n"
        "}")
        self.passwordInputWidget.setObjectName("passwordInputWidget")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.passwordInputWidget)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.passwordPlainTextEdit = QtWidgets.QPlainTextEdit(self.passwordInputWidget)
        self.passwordPlainTextEdit.setMinimumSize(QtCore.QSize(280, 0))
        self.passwordPlainTextEdit.setMaximumSize(QtCore.QSize(280, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.passwordPlainTextEdit.setFont(font)
        self.passwordPlainTextEdit.setStyleSheet("#passwordPlainTextEdit {\n"
        "    background-color: #2c2c2c;\n"
        "    color: #f0f0f0;\n"
        "    border: none;\n"
        "}")
        self.passwordPlainTextEdit.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.passwordPlainTextEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.passwordPlainTextEdit.setObjectName("passwordPlainTextEdit")
        self.horizontalLayout_5.addWidget(self.passwordPlainTextEdit)
        self.horizontalLayout_7.addWidget(self.passwordInputWidget)
        self.passwordGenerateButton = QtWidgets.QPushButton(self.suggestedWidget)
        self.passwordGenerateButton.setMinimumSize(QtCore.QSize(130, 0)) # Fixed size for consistency
        self.passwordGenerateButton.setMaximumSize(QtCore.QSize(130, 50)) # Fixed size for consistency
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.passwordGenerateButton.setFont(font)
        # Stylesheet from hideMess.py
        self.passwordGenerateButton.setStyleSheet("""
        QPushButton {
                background-color: #1F5C94;       /* Green background */
                color: white;                    /* White text */
                border: none;                   /* No border */
                border-radius: 8px;             /* Rounded corners */
                padding: 10px 20px;             /* Vertical and horizontal padding */
                font-size: 16px;                /* Bigger font */
                font-weight: bold;              /* Bold text */
                margin-top: 4px;
        }
        QPushButton:hover {
                background-color: #3B84CC;      /* Slightly darker green on hover */
        }
        QPushButton:pressed {
                background-color: #3A8DDE;      /* Even darker green on press */
        }
        """)
        self.passwordGenerateButton.setObjectName("passwordGenerateButton")

        self.horizontalLayout_7.addWidget(self.passwordGenerateButton)
        self.passwordGenerateButton.setVisible(False)
        self.horizontalLayout_3.addWidget(self.suggestedWidget)
        self.verticalLayout_3.addWidget(self.passwordAndButtonsWidget) # Added this line from hideMess.py

        # Convert Frame and its contents
        self.convertFrame = QtWidgets.QWidget(self.centralwidget)
        self.convertFrame.setGeometry(QtCore.QRect(40, 120, 831, 291)) # Corrected geometry based on hideMess.py
        self.convertFrame.setObjectName("convertFrame")
        self.comboBoxeswidget = QtWidgets.QWidget(self.convertFrame)
        self.comboBoxeswidget.setGeometry(QtCore.QRect(0, 0, 671, 61))
        self.comboBoxeswidget.setMinimumSize(QtCore.QSize(671, 61))
        self.comboBoxeswidget.setMaximumSize(QtCore.QSize(671, 61))
        self.comboBoxeswidget.setObjectName("comboBoxeswidget")
        self.fromComboBox = QtWidgets.QComboBox(self.comboBoxeswidget)
        self.fromComboBox.setGeometry(QtCore.QRect(11, 5, 200, 40))
        self.fromComboBox.setMinimumSize(QtCore.QSize(200, 40))
        self.fromComboBox.setMaximumSize(QtCore.QSize(200, 40))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection") # Changed font family as in hideMess.py
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.fromComboBox.setFont(font)
        self.fromComboBox.setObjectName("fromComboBox")
       
        self.toComboBox = QtWidgets.QComboBox(self.comboBoxeswidget)
        self.toComboBox.setGeometry(QtCore.QRect(449, 5, 200, 40))
        self.toComboBox.setMinimumSize(QtCore.QSize(200, 40))
        self.toComboBox.setMaximumSize(QtCore.QSize(200, 40))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection") # Changed font family as in hideMess.py
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.toComboBox.setFont(font)
        self.toComboBox.setObjectName("toComboBox")

        self.convertionWidget = QtWidgets.QWidget(self.convertFrame)
        self.convertionWidget.setGeometry(QtCore.QRect(0, 60, 831, 221))
        self.convertionWidget.setObjectName("convertionWidget")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.convertionWidget)
        self.horizontalLayout_4.setContentsMargins(10, 0, 0, 0) # Adjusted margins for consistency
        self.horizontalLayout_4.setSpacing(14) # Adjusted spacing for consistency
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")

        # From Stacked Widget and its pages
        self.fromStackedWidget = QtWidgets.QStackedWidget(self.convertionWidget)
        self.fromStackedWidget.setObjectName("fromStackedWidget")
        
        # From Text Widget
        self.fromTextWidget = QtWidgets.QWidget()
        self.fromTextWidget.setObjectName("fromTextWidget")
        self.fromWidget_textTotext = QtWidgets.QWidget(self.fromTextWidget) # Renamed to match hideMess.py structure
        self.fromWidget_textTotext.setGeometry(QtCore.QRect(0, 20, 372, 170))
        self.fromWidget_textTotext.setMinimumSize(QtCore.QSize(372, 170))
        self.fromWidget_textTotext.setMaximumSize(QtCore.QSize(372, 170))
        self.fromWidget_textTotext.setStyleSheet("QWidget {\n"
        "    border: 1px solid #3d3d3d;\n"
        "    border-radius: 10px;\n"
        "}\n"
        "QWidget:hover {\n"
        "       border: 1px solid #5a5a5a;\n"
        "}\n"
        "QWidget:focus {\n"
        "       border: 1px solid #ffffff;\n"
        "}\n"
        "")
        self.fromWidget_textTotext.setObjectName("fromWidget_textTotext")
        self.fromPlainTextEdit = QtWidgets.QPlainTextEdit(self.fromWidget_textTotext)
        self.fromPlainTextEdit.setGeometry(QtCore.QRect(10, 10, 353, 151))
        self.fromPlainTextEdit.setMinimumSize(QtCore.QSize(353, 151))
        self.fromPlainTextEdit.setMaximumSize(QtCore.QSize(353, 171))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.fromPlainTextEdit.setFont(font)
        self.fromPlainTextEdit.setStyleSheet("QPlainTextEdit {\n"
        "    border: none;\n"
        "    background-color: #2c2c2c;\n"
        "    color: white;\n"
        "    border-radius: 10px;\n"
        "}")
        self.fromPlainTextEdit.setObjectName("fromPlainTextEdit")
        self.fromStackedWidget.addWidget(self.fromTextWidget)
        
        # From Image Widget
        self.fromImgWidget = QtWidgets.QWidget()
        self.fromImgWidget.setObjectName("fromImgWidget")
        # Renamed toWidget_textToimg to fromWidget_fromImg for clarity and consistency with hideMess.py
        self.fromWidget_fromImg = QtWidgets.QWidget(self.fromImgWidget) 
        self.fromWidget_fromImg.setGeometry(QtCore.QRect(0, 20, 372, 170))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fromWidget_fromImg.sizePolicy().hasHeightForWidth())
        self.fromWidget_fromImg.setSizePolicy(sizePolicy)
        self.fromWidget_fromImg.setMinimumSize(QtCore.QSize(372, 170))
        self.fromWidget_fromImg.setMaximumSize(QtCore.QSize(372, 170))
        self.fromWidget_fromImg.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.fromWidget_fromImg.setAutoFillBackground(False)
        self.fromWidget_fromImg.setStyleSheet("QWidget {\n"
        "    border: 1px solid #3d3d3d;\n"
        "    border-radius: 10px;\n"
        "}\n"
        "QWidget:hover {\n"
        "       border: 1px solid #5a5a5a;\n"
        "}\n"
        "QWidget:focus {\n"
        "       border: 1px solid #ffffff;\n"
        "}\n"
        "")
        self.fromWidget_fromImg.setObjectName("fromWidget_fromImg")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.fromWidget_fromImg)
        self.verticalLayout_5.setContentsMargins(80, 0, 80, 0)
        self.verticalLayout_5.setSpacing(20)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.widget_4 = QtWidgets.QWidget(self.fromWidget_fromImg)
        self.widget_4.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_4.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_4.setObjectName("widget_4")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.widget_4)
        self.verticalLayout_6.setContentsMargins(-1, 0, 47, -1)
        self.verticalLayout_6.setObjectName("verticalLayout_6")

        self.label_4 = QtWidgets.QLabel(self.widget_4) # this was fromImgIcon in previous revealContent
        self.label_4.setMinimumSize(QtCore.QSize(0, 88)) # Changed from 100,100
        self.label_4.setMaximumSize(QtCore.QSize(120, 90)) # Changed from 100,100
        self.label_4.setLayoutDirection(QtCore.Qt.RightToLeft) # Added from hideMess.py
        self.label_4.setText("")
        
        # Corrected path for cloud-arrow-up-svgrepo-com.svg (from hideMess.py)
        cloud_icon_path = os.path.join(hide_message_icons_path, "cloud-arrow-up-svgrepo-com.svg")
        original_pixmap_cloud = QtGui.QPixmap(cloud_icon_path)
        colored_pixmap_cloud = colorize_pixmap(original_pixmap_cloud, "#3d3d3d")
        self.label_4.setPixmap(colored_pixmap_cloud)
        
        self.label_4.setScaledContents(True)
        self.label_4.setWordWrap(False) # Added from hideMess.py
        self.label_4.setObjectName("label_4") # Renamed from fromImgIcon
        self.verticalLayout_6.addWidget(self.label_4)
        self.verticalLayout_5.addWidget(self.widget_4)
        self.widget_5 = QtWidgets.QWidget(self.fromWidget_fromImg) # Used fromWidget_fromImg
        self.widget_5.setMaximumSize(QtCore.QSize(16777215, 88)) # Corrected size
        self.widget_5.setStyleSheet("QWidget {\n" # Stylesheet from hideMess.py
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_5.setObjectName("widget_5")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.widget_5)
        self.verticalLayout_7.setContentsMargins(55, 0, -1, -1) # Corrected margins
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.fromBrowseButton_img = QtWidgets.QPushButton(self.widget_5) # Used widget_5
        self.fromBrowseButton_img.setMinimumSize(QtCore.QSize(100, 35)) # Corrected size
        self.fromBrowseButton_img.setMaximumSize(QtCore.QSize(100, 35)) # Corrected size
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.fromBrowseButton_img.setFont(font)
        # Stylesheet from hideMess.py
        self.fromBrowseButton_img.setStyleSheet("""
        QPushButton {
        background-color: #3a3a3a;
        color: #f0f0f0;
        border: 1px solid #555555;
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: bold;
        }

        QPushButton:hover {
        background-color: #4a4a4a;
        border: 1px solid #666666;
        }

        QPushButton:pressed {
        background-color: #2a2a2a;
        border: 1px solid #888888;
        }
        """)
        self.fromBrowseButton_img.setObjectName("fromBrowseButton_img")
        self.verticalLayout_7.addWidget(self.fromBrowseButton_img)
        self.verticalLayout_5.addWidget(self.widget_5)
        self.fromStackedWidget.addWidget(self.fromImgWidget)

        # From Audio Widget
        self.fromAudioWidget = QtWidgets.QWidget()
        self.fromAudioWidget.setObjectName("fromAudioWidget")
        # Renamed fromWidget_audioTotext for clarity and consistency
        self.fromWidget_audioTotext = QtWidgets.QWidget(self.fromAudioWidget) 
        self.fromWidget_audioTotext.setGeometry(QtCore.QRect(0, 20, 372, 170))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fromWidget_audioTotext.sizePolicy().hasHeightForWidth())
        self.fromWidget_audioTotext.setSizePolicy(sizePolicy)
        self.fromWidget_audioTotext.setMinimumSize(QtCore.QSize(372, 170))
        self.fromWidget_audioTotext.setMaximumSize(QtCore.QSize(372, 170))
        self.fromWidget_audioTotext.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.fromWidget_audioTotext.setAutoFillBackground(False)
        self.fromWidget_audioTotext.setStyleSheet("QWidget {\n"
        "    border: 1px solid #3d3d3d;\n"
        "    border-radius: 10px;\n"
        "}\n"
        "QWidget:hover {\n"
        "       border: 1px solid #5a5a5a;\n"
        "}\n"
        "QWidget:focus {\n"
        "       border: 1px solid #ffffff;\n"
        "}\n"
        "")
        self.fromWidget_audioTotext.setObjectName("fromWidget_audioTotext")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.fromWidget_audioTotext)
        self.verticalLayout_11.setContentsMargins(80, 0, 80, 0)
        self.verticalLayout_11.setSpacing(20)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.widget_8 = QtWidgets.QWidget(self.fromWidget_audioTotext)
        self.widget_8.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_8.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_8.setObjectName("widget_8")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.widget_8)
        self.verticalLayout_12.setContentsMargins(-1, 0, 47, -1)
        self.verticalLayout_12.setObjectName("verticalLayout_12")

        self.label_6 = QtWidgets.QLabel(self.widget_8) # this was fromAudioIcon in previous revealContent
        self.label_6.setMinimumSize(QtCore.QSize(0, 88)) # Corrected size
        self.label_6.setMaximumSize(QtCore.QSize(120, 90)) # Corrected size
        self.label_6.setLayoutDirection(QtCore.Qt.RightToLeft) # Added from hideMess.py
        self.label_6.setText("")
        
        # Corrected path for audio.svg
        audio_icon_full_path = os.path.join(hide_message_icons_path, "audio-svgrepo-com.svg")
        original_pixmap_audio = QtGui.QPixmap(audio_icon_full_path)
        colored_pixmap_audio = colorize_pixmap(original_pixmap_audio, "#3d3d3d")
        self.label_6.setPixmap(colored_pixmap_audio)
        
        self.label_6.setScaledContents(True)
        self.label_6.setWordWrap(False) # Added from hideMess.py
        self.label_6.setObjectName("label_6") # Renamed from fromAudioIcon
        self.verticalLayout_12.addWidget(self.label_6)
        self.verticalLayout_11.addWidget(self.widget_8)
        self.widget_9 = QtWidgets.QWidget(self.fromWidget_audioTotext) # Used fromWidget_audioTotext
        self.widget_9.setMaximumSize(QtCore.QSize(16777215, 88)) # Corrected size
        self.widget_9.setStyleSheet("QWidget {\n" # Stylesheet from hideMess.py
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_9.setObjectName("widget_9")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.widget_9)
        self.verticalLayout_13.setContentsMargins(55, 0, -1, -1) # Corrected margins
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.fromBrowseButton_audio = QtWidgets.QPushButton(self.widget_9) # Used widget_9
        self.fromBrowseButton_audio.setMinimumSize(QtCore.QSize(100, 35)) # Corrected size
        self.fromBrowseButton_audio.setMaximumSize(QtCore.QSize(100, 35)) # Corrected size
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.fromBrowseButton_audio.setFont(font)
        # Stylesheet from hideMess.py (toBrowseButton_audio style was similar)
        self.fromBrowseButton_audio.setStyleSheet("""
        QPushButton {
        background-color: #3a3a3a;
        color: #f0f0f0;
        border: 1px solid #555555;
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: bold;
        }

        QPushButton:hover {
        background-color: #4a4a4a;
        border: 1px solid #666666;
        }

        QPushButton:pressed {
        background-color: #2a2a2a;
        border: 1px solid #888888;
        }
        """)
        self.fromBrowseButton_audio.setObjectName("fromBrowseButton_audio")
        self.verticalLayout_13.addWidget(self.fromBrowseButton_audio)
        self.verticalLayout_11.addWidget(self.widget_9)
        self.fromStackedWidget.addWidget(self.fromAudioWidget)

        self.horizontalLayout_4.addWidget(self.fromStackedWidget)

        # Arrow Right Label
        self.arrowRightLabel = QtWidgets.QLabel(self.convertionWidget)
        self.arrowRightLabel.setMaximumSize(QtCore.QSize(35, 35)) # Corrected size
        self.arrowRightLabel.setStyleSheet("QLabel {\n" # Stylesheet from hideMess.py
        "    color; #ffffff;\n"
        "}")
        self.arrowRightLabel.setText("")
        # Corrected path for arrow-right-svgrepo-com.svg
        arrow_icon_path = os.path.join(hide_message_icons_path, "arrow-right-svgrepo-com.svg")
        original_pixmap_arrow = QtGui.QPixmap(arrow_icon_path)
        colored_pixmap_arrow = colorize_pixmap(original_pixmap_arrow, "#3d3d3d")
        self.arrowRightLabel.setPixmap(colored_pixmap_arrow)
        self.arrowRightLabel.setScaledContents(True)
        self.arrowRightLabel.setObjectName("arrowRightLabel")
        self.horizontalLayout_4.addWidget(self.arrowRightLabel)

        # To Stacked Widget and its pages
        self.toStackedWidget = QtWidgets.QStackedWidget(self.convertionWidget)
        self.toStackedWidget.setObjectName("toStackedWidget")

        # To Text Widget
        self.toTextWidget = QtWidgets.QWidget()
        self.toTextWidget.setObjectName("toTextWidget")
        self.toWidget_textTotext = QtWidgets.QWidget(self.toTextWidget) # Renamed to match hideMess.py
        self.toWidget_textTotext.setGeometry(QtCore.QRect(0, 20, 372, 170))
        self.toWidget_textTotext.setMinimumSize(QtCore.QSize(372, 170))
        self.toWidget_textTotext.setMaximumSize(QtCore.QSize(372, 170))
        self.toWidget_textTotext.setStyleSheet("QWidget {\n"
        "    border: 1px solid #3d3d3d;\n"
        "    border-radius: 10px;\n"
        "}\n"
        "QWidget:hover {\n"
        "       border: 1px solid #5a5a5a;\n"
        "}\n"
        "QWidget:focus {\n"
        "       border: 1px solid #ffffff;\n"
        "}\n"
        "") # Removed hover/focus as in hideMess.py for this widget
        self.toWidget_textTotext.setObjectName("toWidget_textTotext")
        self.toPlainTextEdit = QtWidgets.QPlainTextEdit(self.toWidget_textTotext)
        self.toPlainTextEdit.setGeometry(QtCore.QRect(10, 10, 353, 151))
        self.toPlainTextEdit.setMinimumSize(QtCore.QSize(353, 151))
        self.toPlainTextEdit.setMaximumSize(QtCore.QSize(353, 171))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.toPlainTextEdit.setFont(font)
        self.toPlainTextEdit.setStyleSheet("QPlainTextEdit {\n"
        "    border: none;\n"
        "    background-color: #2c2c2c;\n"
        "    color: white;\n"
        "    border-radius: 10px;\n"
        "}")
        self.toPlainTextEdit.setObjectName("toPlainTextEdit")
        self.toStackedWidget.addWidget(self.toTextWidget)

        # To Image Widget
        self.toImgWidget = QtWidgets.QWidget()
        self.toImgWidget.setObjectName("toImgWidget")
        self.toWidget_Toimg = QtWidgets.QWidget(self.toImgWidget) # Renamed to match hideMess.py
        self.toWidget_Toimg.setGeometry(QtCore.QRect(0, 20, 372, 170))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toWidget_Toimg.sizePolicy().hasHeightForWidth())
        self.toWidget_Toimg.setSizePolicy(sizePolicy)
        self.toWidget_Toimg.setMinimumSize(QtCore.QSize(372, 170))
        self.toWidget_Toimg.setMaximumSize(QtCore.QSize(372, 170))
        self.toWidget_Toimg.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.toWidget_Toimg.setAutoFillBackground(False)
        self.toWidget_Toimg.setStyleSheet("QWidget {\n"
        "    border: 1px solid #3d3d3d;\n"
        "    border-radius: 10px;\n"
        "}\n"
        "QWidget:hover {\n"
        "       border: 1px solid #5a5a5a;\n"
        "}\n"
        "QWidget:focus {\n"
        "       border: 1px solid #ffffff;\n"
        "}\n"
        "")
        self.toWidget_Toimg.setObjectName("toWidget_Toimg")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.toWidget_Toimg)
        self.verticalLayout_8.setContentsMargins(80, 0, 80, 0)
        self.verticalLayout_8.setSpacing(20)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.widget_6 = QtWidgets.QWidget(self.toWidget_Toimg)
        self.widget_6.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_6.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_6.setObjectName("widget_6")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.widget_6)
        self.verticalLayout_9.setContentsMargins(-1, 0, 47, -1)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.label_5 = QtWidgets.QLabel(self.widget_6)
        self.label_5.setMinimumSize(QtCore.QSize(0, 88))
        self.label_5.setMaximumSize(QtCore.QSize(120, 90))
        self.label_5.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_5.setText("")
        
        # Corrected path for cloud-arrow-up-svgrepo-com.svg
        self.label_5.setPixmap(colorize_pixmap(QtGui.QPixmap(cloud_icon_path), "#3d3d3d"))
        
        self.label_5.setScaledContents(True)
        self.label_5.setWordWrap(False)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_9.addWidget(self.label_5)
        self.verticalLayout_8.addWidget(self.widget_6)
        self.widget_7 = QtWidgets.QWidget(self.toWidget_Toimg)
        self.widget_7.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_7.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_7.setObjectName("widget_7")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.widget_7)
        self.verticalLayout_10.setContentsMargins(55, 0, -1, -1)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.toBrowseButton_img = QtWidgets.QPushButton(self.widget_7)
        self.toBrowseButton_img.setMinimumSize(QtCore.QSize(100, 35))
        self.toBrowseButton_img.setMaximumSize(QtCore.QSize(100, 35))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.toBrowseButton_img.setFont(font)
        # Stylesheet from hideMess.py
        self.toBrowseButton_img.setStyleSheet("""
        QPushButton {
        background-color: #3a3a3a;
        color: #f0f0f0;
        border: 1px solid #555555;
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: bold;
        }

        QPushButton:hover {
        background-color: #4a4a4a;
        border: 1px solid #666666;
        }

        QPushButton:pressed {
        background-color: #2a2a2a;
        border: 1px solid #888888;
        }
        """)
        self.toBrowseButton_img.setObjectName("toBrowseButton_img")
        self.verticalLayout_10.addWidget(self.toBrowseButton_img)
        self.verticalLayout_8.addWidget(self.widget_7)
        self.toStackedWidget.addWidget(self.toImgWidget)

        # To Audio Widget (added in previous step, now styled consistently)
        self.toAudioWidget = QtWidgets.QWidget()
        self.toAudioWidget.setObjectName("toAudioWidget")
        self.toWidget_textToaudio = QtWidgets.QWidget(self.toAudioWidget) # Renamed to match hideMess.py
        self.toWidget_textToaudio.setGeometry(QtCore.QRect(0, 20, 372, 170))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toWidget_textToaudio.sizePolicy().hasHeightForWidth())
        self.toWidget_textToaudio.setSizePolicy(sizePolicy)
        self.toWidget_textToaudio.setMinimumSize(QtCore.QSize(372, 170))
        self.toWidget_textToaudio.setMaximumSize(QtCore.QSize(372, 170))
        self.toWidget_textToaudio.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.toWidget_textToaudio.setAutoFillBackground(False)
        self.toWidget_textToaudio.setStyleSheet("QWidget {\n"
        "    border: 1px solid #3d3d3d;\n"
        "    border-radius: 10px;\n"
        "}"
        "QWidget:hover {\n"
        "       border: 1px solid #5a5a5a;\n"
        "}\n"
        "QWidget:focus {\n"
        "       border: 1px solid #ffffff;\n"
        "}\n"
        "")
        self.toWidget_textToaudio.setObjectName("toWidget_textToaudio")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.toWidget_textToaudio)
        self.verticalLayout_11.setContentsMargins(80, 0, 80, 0)
        self.verticalLayout_11.setSpacing(20)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.widget_8 = QtWidgets.QWidget(self.toWidget_textToaudio)
        self.widget_8.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_8.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_8.setObjectName("widget_8")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.widget_8)
        self.verticalLayout_12.setContentsMargins(-1, 0, 47, -1)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.label_6_to_audio = QtWidgets.QLabel(self.widget_8) # Renamed to avoid clash, was label_6 in hideMess
        self.label_6_to_audio.setMinimumSize(QtCore.QSize(0, 88))
        self.label_6_to_audio.setMaximumSize(QtCore.QSize(120, 90))
        self.label_6_to_audio.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_6_to_audio.setText("")
        
        # Corrected path for audio-svgrepo-com.svg
        self.label_6_to_audio.setPixmap(colorize_pixmap(QtGui.QPixmap(audio_icon_full_path), "#3d3d3d"))
        
        self.label_6_to_audio.setScaledContents(True)
        self.label_6_to_audio.setWordWrap(False)
        self.label_6_to_audio.setObjectName("label_6_to_audio")
        self.verticalLayout_12.addWidget(self.label_6_to_audio)
        self.verticalLayout_11.addWidget(self.widget_8)
        self.widget_9 = QtWidgets.QWidget(self.toWidget_textToaudio)
        self.widget_9.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_9.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_9.setObjectName("widget_9")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.widget_9)
        self.verticalLayout_13.setContentsMargins(55, 0, -1, -1)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.toBrowseButton_audio = QtWidgets.QPushButton(self.widget_9)
        self.toBrowseButton_audio.setMinimumSize(QtCore.QSize(100, 35))
        self.toBrowseButton_audio.setMaximumSize(QtCore.QSize(100, 35))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.toBrowseButton_audio.setFont(font)
        # Stylesheet from hideMess.py
        self.toBrowseButton_audio.setStyleSheet("""
        QPushButton {
        background-color: #3a3a3a;
        color: #f0f0f0;
        border: 1px solid #555555;
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: bold;
        }

        QPushButton:hover {
        background-color: #4a4a4a;
        border: 1px solid #666666;
        }

        QPushButton:pressed {
        background-color: #2a2a2a;
        border: 1px solid #888888;
        }
        """)
        self.toBrowseButton_audio.setObjectName("toBrowseButton_audio")
        self.verticalLayout_13.addWidget(self.toBrowseButton_audio)
        self.verticalLayout_11.addWidget(self.widget_9)
        self.toStackedWidget.addWidget(self.toAudioWidget)

        self.horizontalLayout_4.addWidget(self.toStackedWidget)

        # File Path Widget
        self.filePathWidget = QtWidgets.QWidget(self.centralwidget)
        self.filePathWidget.setGeometry(QtCore.QRect(40, 465, 831, 47))
        self.filePathWidget.setMinimumSize(QtCore.QSize(831, 47))
        self.filePathWidget.setMaximumSize(QtCore.QSize(831, 47))
        self.filePathWidget.setStyleSheet("QWidget {\n"
        "    color: #f0f0f0;\n"
        "\n"
        "}")
        self.filePathWidget.setObjectName("filePathWidget")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.filePathWidget)
        self.horizontalLayout_6.setContentsMargins(10, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.yourFileLabel = QtWidgets.QLabel(self.filePathWidget)
        self.yourFileLabel.setMinimumSize(QtCore.QSize(90, 25))
        self.yourFileLabel.setMaximumSize(QtCore.QSize(90, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.yourFileLabel.setFont(font)
        self.yourFileLabel.setStyleSheet("QLabel {\n"
        "    color: #f0f0f0;\n"
        "}")
        self.yourFileLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.yourFileLabel.setObjectName("yourFileLabel")
        self.horizontalLayout_6.addWidget(self.yourFileLabel)
        self.pathLabel = QtWidgets.QLabel(self.filePathWidget)
        self.pathLabel.setMinimumSize(QtCore.QSize(0, 25))
        self.pathLabel.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.pathLabel.setFont(font)
        self.pathLabel.setStyleSheet("QLabel {\n"
        "    color: #f0f0f0;\n"
        "}")
        self.pathLabel.setObjectName("pathLabel")
        self.horizontalLayout_6.addWidget(self.pathLabel)

        # Push Button (Decode)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(50, 412, 115, 40)) # Corrected geometry
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.pushButton.setFont(font)
        # Stylesheet from hideMess.py (general button style)
        self.pushButton.setStyleSheet("""
                QPushButton {
                background-color: #3a3a3a;
                color: #f0f0f0;
                border: 1px solid #555555;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: bold;
                }

                QPushButton:hover {
                background-color: #4a4a4a;
                border: 1px solid #666666;
                }

                QPushButton:pressed {
                background-color: #2a2a2a;
                border: 1px solid #888888;
                }
                """)
        self.pushButton.setObjectName("pushButton")
        
        # Connect the Decode button
        self.pushButton.clicked.connect(self.decodeContent)

        # Save Button
        self.saveButton = QtWidgets.QPushButton(self.centralwidget)
        self.saveButton.setGeometry(QtCore.QRect(700, 590, 250, 55)) # Corrected geometry
        self.saveButton.setMinimumSize(QtCore.QSize(0, 55))
        self.saveButton.setMaximumSize(QtCore.QSize(150, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.saveButton.setFont(font)
        self.saveButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        # Stylesheet from hideMess.py (gradient button style)
        self.saveButton.setStyleSheet("""
                QPushButton {
                        background: qlineargradient(
                        x1:0, y1:0, x2:1, y2:0, 
                        stop:0 #6a11cb, 
                        stop:1 #2575fc
                        );
                        color: white;
                        border: none;
                        border-radius: 8px;
                        padding: 2px 2px;
                        font-size: 16px;
                        font-weight: 600;
                }
                QPushButton:hover {
                        background: qlineargradient(
                        x1:0, y1:0, x2:1, y2:0,
                        stop:0 #7b33d9,
                        stop:1 #2d85ff
                        );
                }
                QPushButton:pressed {
                        background: qlineargradient(
                        x1:0, y1:0, x2:1, y2:0,
                        stop:0 #4a0e9a,
                        stop:1 #1b4ecc
                        );
                }
        """)
        self.saveButton.setObjectName("saveButton")

        MainWindow.setMenuBar(QtWidgets.QMenuBar(MainWindow)) # Explicitly create menubar
        MainWindow.setStatusBar(QtWidgets.QStatusBar(MainWindow)) # Explicitly create statusbar
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        
        # Set initial index for fromStackedWidget and toStackedWidget (from hideMess.py)
        self.fromStackedWidget.setCurrentIndex(1) # Image tab is default in hideMess.py
        self.toStackedWidget.setCurrentIndex(0) # Text is usually default output for reveal

        # Connect signals
        self.fromComboBox.currentIndexChanged.connect(self.updateFromStackedWidget) # Use currentIndexChanged
        self.toComboBox.currentIndexChanged.connect(self.updateToStackedWidget) # Use currentIndexChanged


        self.fromBrowseButton_img.clicked.connect(self.browseImageContent)
        self.fromBrowseButton_audio.clicked.connect(self.browseAudioContent)

        # Connect the Decode button
        self.pushButton.clicked.connect(self.decodeContentWithPassword)
        self.saveButton.clicked.connect(self.saveDecodedContent)



        # Initial population and update for combo boxes
        self.fromComboBox.addItem("Text")
        self.fromComboBox.addItem("Image")
        self.fromComboBox.addItem("Audio")

        self.toComboBox.addItem("Text") # Text is always an option for decoded output

        # Store selected file paths
        self.selected_from_file_path = None
        self.decoded_image_pixmap = None # To store decoded image if any


        # Set initial state of toComboBox based on default fromComboBox selection
        self.updateFromStackedWidget(self.fromComboBox.currentIndex())
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def updateFromStackedWidget(self, index):
        """
        Updates the 'from' stacked widget and 'to' combo box based on the
        'fromComboBox' selection.
        """
        self.toComboBox.clear() # Always clear toComboBox first

        if index == 0:  # "Text" selected in fromComboBox
            self.fromStackedWidget.setCurrentWidget(self.fromTextWidget)
            self.toComboBox.addItem("Text")
            self.toComboBox.setCurrentIndex(0) # Select Text by default
        elif index == 1:  # "Image" selected in fromComboBox
            self.fromStackedWidget.setCurrentWidget(self.fromImgWidget)
            self.toComboBox.addItem("Text")
            self.toComboBox.addItem("Image")
            self.toComboBox.setCurrentIndex(0) # Select Text by default
        elif index == 2: # "Audio" selected in fromComboBox
            self.fromStackedWidget.setCurrentWidget(self.fromAudioWidget)
            self.toComboBox.addItem("Text")
            self.toComboBox.setCurrentIndex(0) # Select Text by default

    def updateToStackedWidget(self, index):
        """
        Updates the 'to' stacked widget based on the 'toComboBox' selection.
        """
        if index == 0:  # "Text" selected in toComboBox
            self.toStackedWidget.setCurrentWidget(self.toTextWidget)
        elif index == 1:  # "Image" selected in toComboBox
            self.toStackedWidget.setCurrentWidget(self.toImgWidget)
            # Display decoded image if available
            if self.decoded_image_pixmap and not self.decoded_image_pixmap.isNull():
                self.label_5.setPixmap(self.decoded_image_pixmap.scaled(self.label_5.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
            else:
                # Optionally, clear or show a placeholder if no image is decoded yet
                self.label_5.clear()



    def browseImageContent(self):
        options = QtWidgets.QFileDialog.Options()
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(self.MainWindow, "Open Image File", "", "Image Files (*.png);;All Files (*)", options=options)
        if file_path:
            self.current_selected_file = file_path
            self.pathLabel.setText(os.path.basename(file_path))
            # You might want to display the image in a QLabel here if needed
            # For decoding, just having the path is enough.

    def browseAudioContent(self):
        options = QtWidgets.QFileDialog.Options()
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(self.MainWindow, "Open Audio File", "", "Audio Files (*.mp3);;All Files (*)", options=options)
        if file_path:
            self.current_selected_file = file_path
            self.pathLabel.setText(os.path.basename(file_path))


    def encode_audio_with_password(self, file_path, message, password, algo_label, output_path):
        # Internally reuses encode_text_with_password since it already handles mp3
        return self.encode_text_with_password(file_path, message, password, algo_label, output_path)





    def decodeContentWithPassword(self):
        file_path = getattr(self, 'current_selected_file', None)
        password = self.passwordPlainTextEdit.toPlainText()

        if not file_path:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Input Error", "Please select a file to decode.")
            return

        if not password:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Input Error", "Please enter a password.")
            return

        decoded_content = ""
        data_type = None
        file_extension = os.path.splitext(file_path)[1].lower()

        if file_extension in ['.png', '.jpg', '.jpeg', '.bmp']:
            data_type = "text" # Assuming text is hidden in image based on user's prompt
        elif file_extension in ['.mp3', '.wav', '.flac']:
            data_type = "audio" # Assuming text is hidden in audio based on user's prompt
        else:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Unsupported File Type", "Selected file type is not supported for decoding with password.")
            return

        try:
            
            # To this (correct) line
            decoded_content = self.stego_pass.decode_with_password(
                file_path=file_path,
                password=password, # <-- The correct parameter name is 'password'
                data_type=data_type
)
            
            if decoded_content:
                self.toPlainTextEdit.setPlainText(decoded_content)
                QtWidgets.QMessageBox.information(self.MainWindow, "Success", "Content decoded successfully!")
            else:
                self.toPlainTextEdit.setPlainText("No content decoded or incorrect password.")
                QtWidgets.QMessageBox.warning(self.MainWindow, "Decoding Failed", "Could not decode content. Check password or file.")

        except ValueError as ve:
            QtWidgets.QMessageBox.critical(self.MainWindow, "Decoding Error", str(ve))
        except Exception as e:
            QtWidgets.QMessageBox.critical(self.MainWindow, "Error", f"An unexpected error occurred: {e}")
            traceback.print_exc() # Print full traceback for debugging




    def decodeContent(self):
        from_type = self.fromComboBox.currentText()
        to_type = self.toComboBox.currentText()

        self.toPlainTextEdit.clear()  # Clear previous output

        try:
                # 🟨 Case 1: Text ➝ Text (ReverseCrypt)
                if from_type == "Text" and to_type == "Text":
                        text_to_decrypt = self.fromPlainTextEdit.toPlainText()
                        if text_to_decrypt:
                                decrypted_text = self.text_steganography.Decrypt(text_to_decrypt)
                                self.toPlainTextEdit.setPlainText(decrypted_text)
                        else:
                                self.toPlainTextEdit.setPlainText("Please enter text to decrypt in the 'From' text area.")

                # 🟦 Case 2: Image ➝ Text (TextSteganography)
                elif from_type == "Image" and to_type == "Text":
                        image_path = self.pathLabel.text()
                        if os.path.exists(image_path) and image_path != "Path///":
                                result = self.textFromimage_steganography.decode_info(image_path)
                                self.toPlainTextEdit.setPlainText(result if result else "No message found or decoding failed.")
                        else:
                                self.toPlainTextEdit.setPlainText("Please select a valid image file.")

                # 🟥 Case 3: Image ➝ Image (ImageSteganography)
                elif from_type == "Image" and to_type == "Image":
                        image_path = self.pathLabel.text()
                        if os.path.exists(image_path) and image_path != "Path///":
                                if not self.image_steganography.check_content(image_path):
                                        self.toPlainTextEdit.setPlainText("⚠ No valid hidden image content found.")
                                        return

                                decoded_image = self.image_steganography.decode_info(image_path)
                                if decoded_image:
                                        output_dir = "decoded_stego_output"
                                        os.makedirs(output_dir, exist_ok=True)
                                        output_image_path = os.path.join(output_dir, "decoded_image.png")
                                        decoded_image.save(output_image_path)
                                        self.toPlainTextEdit.setPlainText(f"✅ Decoded image saved to:\n{os.path.abspath(output_image_path)}")
                                else:
                                        self.toPlainTextEdit.setPlainText("❌ Decoding failed or no valid image content.")
                        else:
                                self.toPlainTextEdit.setPlainText("❗ Please select a valid image file.")

                # 🟧 Case 4: Audio ➝ Text (AudioTextSteganography)
                elif from_type == "Audio" and to_type == "Text":
                        audio_path = self.pathLabel.text()
                        if os.path.exists(audio_path) and audio_path != "Path///":
                                result = self.audio_steganography.decode_info(audio_path)
                                self.toPlainTextEdit.setPlainText(result if result else "No message found or decoding failed.")
                        else:
                                self.toPlainTextEdit.setPlainText("Please select a valid audio file.")

                else:
                        self.toPlainTextEdit.setPlainText("Unsupported format combination selected for decoding.")

        except Exception as e:
                self.toPlainTextEdit.setPlainText(f"An unexpected error occurred during decoding:\n{e}")



    def saveDecodedContent(self):
        # This method is already connected and presumably exists.
        # Its implementation is not requested for modification, so leaving it as is.
        # It should save the content from self.toPlainTextEdit.
        text_to_save = self.toPlainTextEdit.toPlainText()
        if not text_to_save:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Save Error", "No decoded content to save.")
            return
        
        options = QtWidgets.QFileDialog.Options()
        file_path, _ = QtWidgets.QFileDialog.getSaveFileName(self.MainWindow, "Save Decoded Text", "", "Text Files (*.txt);;All Files (*)", options=options)
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(text_to_save)
                QtWidgets.QMessageBox.information(self.MainWindow, "Save Success", f"Decoded content saved to {file_path}")
            except Exception as e:
                QtWidgets.QMessageBox.critical(self.MainWindow, "Save Error", f"Failed to save content: {e}")
                traceback.print_exc()




















    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Whisper"))
        self.passwordLabel.setText(_translate("MainWindow", "Password (optional):"))
        self.passwordPlainTextEdit.setPlaceholderText(_translate("MainWindow", "password..."))
        # self.passwordGenerateButton.setText(_translate("MainWindow", "Suggested..."))
        self.fromPlainTextEdit.setPlaceholderText(_translate("MainWindow", "Enter your text..."))
        self.fromBrowseButton_img.setText(_translate("MainWindow", "Browse"))
        self.fromBrowseButton_audio.setText(_translate("MainWindow", "Browse"))
        self.toPlainTextEdit.setPlaceholderText(_translate("MainWindow", ". . ."))
        self.toBrowseButton_img.setText(_translate("MainWindow", "Browse"))
        self.yourFileLabel.setText(_translate("MainWindow", "Your file: "))
        self.pathLabel.setText(_translate("MainWindow", ""))
        self.pushButton.setText(_translate("MainWindow", "Decode")) # Changed from Convert to Decode
        self.saveButton.setText(_translate("MainWindow", "Save Decoded")) # Changed from Save



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    try:
        ui.setupUi(MainWindow)
        # Connect save button after setupUi to ensure ui.saveButton exists
        ui.saveButton.clicked.connect(ui.saveDecodedContent)
        MainWindow.show()
        sys.exit(app.exec_())
    except Exception as e:
        print("An error occurred:")
        traceback.print_exc() # Print full traceback
        sys.exit(1) # Exit with an error code