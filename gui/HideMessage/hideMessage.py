# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hide.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QPainter, QColor
from PyQt5 import QtCore
import os
import sys

# Add the parent directory to the system path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'Whisper')))
from Whisper.ImageSteganography import ImageSteganography
from Whisper.steganography import TextSteganography
from Whisper.AudioTextSteganography import AudioTextSteganography
from Whisper.StegoTextPass import StegoTextPass
from Whisper.Reverse_Crypt import ReverseCrypt
from Whisper.protection import PasswordProtection 



def colorize_pixmap(pixmap, color_str):
    tinted = QPixmap(pixmap.size())
    tinted.fill(QtCore.Qt.transparent)

    painter = QPainter(tinted)
    painter.setCompositionMode(QPainter.CompositionMode_Source)
    painter.drawPixmap(0, 0, pixmap)
    painter.setCompositionMode(QPainter.CompositionMode_SourceIn)
    painter.fillRect(tinted.rect(), QColor(color_str))
    painter.end()

    return tinted




class PasswordInput(QtWidgets.QPlainTextEdit):
    focusOut = QtCore.pyqtSignal()

    def focusOutEvent(self, event):
        self.focusOut.emit()
        super().focusOutEvent(event)



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 700)
        script_dir = os.path.dirname(os.path.abspath(__file__))

        self.MainWindow = MainWindow

        # self.ui = Ui_MainWindow()
        # self.ui.setupUi(self)
        MainWindow.setWindowIcon(QtGui.QIcon("gui/StartWindow/imgs/smallW (2).png"))
        MainWindow.setStyleSheet("QMainWindow {\n"
        "    background-color: #2c2c2c; \n"
        "    background-image: url(gui/StartWindow/imgs/DarkBackground.png); \n"
        "}\n"
        "QMainWindow::title {\n"
        "       background-color: #2a2a2a;\n"
        "       color: white;\n"
        "}\n"
        "QComboBox {\n"
        "    background-color: #3a3a3a;\n"
        "    color: #f0f0f0;\n"
        "    border: 1px solid #444444;\n"
        "    border-radius: 4px;\n"
        "    min-height: 40px; \n"
        "    padding-left: 10px;\n"
        "}\n"
        "\n"
        "QComboBox:hover {\n"
        "    background-color: #444444;\n"
        "}\n"
        "\n"
        "QComboBox::drop-down {\n"
        "    background-color: #3a3a3a;\n"
        "    border-left: 1px solid #444444;\n"
        "    width: 24px;\n"
        "}\n"
        "\n"
        "QComboBox::down-arrow {\n"
        "    image: url(gui/HideMessage/icons/down-arrow-5-svgrepo-com.svg);  /* make sure the image exists in resources */\n"
        "    width: 12px;\n"
        "    height: 12px;\n"
        "}\n"

        "QComboBox QAbstractItemView {\n"
        "    background-color: #3a3a3a;\n"
        "    color: #f0f0f0;\n"
        "    selection-background-color: #2c2c2c;\n"
        "    selection-color: #ffffff;\n"
        "    border: 1px solid #444444;\n"
        "    outline: 0;\n"
        "    min-height: 100px;\n"
        "}\n"
        "QComboBox QAbstractItemView::item {\n"
        # "     min-height: 40px;\n"
        "     max-height: 60px;\n"
        "     padding: 10px 10px 10px 10px;\n"
        "     margin: 5px;\n"
        "}\n"
        "QComboBox QAbstractItemView::item:hover {\n"
        "     background-color: #505050;\n"
        "     color: white;\n"
        "}\n"

        "")

        
        self.text_encoder = StegoTextPass()
        # self.audio_steganography = AudioTextSteganography() 
        self.text_steganography = ReverseCrypt()



        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.logoBigFrame = QtWidgets.QFrame(self.centralwidget)
        self.logoBigFrame.setGeometry(QtCore.QRect(0, 10, 900, 71))
        self.logoBigFrame.setStyleSheet("#logoBigFrame {\n"
        "    border: none;\n"
        "    border-bottom: 1px solid #1a1a1a; /* Change color & thickness as needed */\n"
        "}\n"
        "")
        self.logoBigFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.logoBigFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.logoBigFrame.setObjectName("logoBigFrame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.logoBigFrame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.logoSmallFrame = QtWidgets.QFrame(self.logoBigFrame)
        self.logoSmallFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.logoSmallFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.logoSmallFrame.setObjectName("logoSmallFrame")
        self.whisperLogo = QtWidgets.QLabel(self.logoSmallFrame)
        self.whisperLogo.setGeometry(QtCore.QRect(30, 10, 130, 41))
        self.whisperLogo.setText("")
        self.whisperLogo.setPixmap(QtGui.QPixmap("gui/HideMessage/imgs/WhisperLogo.png"))
        self.whisperLogo.setScaledContents(True)
        self.whisperLogo.setAlignment(QtCore.Qt.AlignCenter)
        self.whisperLogo.setWordWrap(False)
        self.whisperLogo.setObjectName("whisperLogo")
        self.horizontalLayout.addWidget(self.logoSmallFrame)
        


        self.passwordWidget = QtWidgets.QWidget(self.centralwidget)
        self.passwordWidget.setGeometry(QtCore.QRect(40, 515, 500, 153))
        self.passwordWidget.setMinimumSize(QtCore.QSize(500, 0))
        self.passwordWidget.setMaximumSize(QtCore.QSize(500, 16777215))
        self.passwordWidget.setObjectName("passwordWidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.passwordWidget)
        self.verticalLayout_3.setContentsMargins(11, 0, 0, 0)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.passwordLabel = QtWidgets.QLabel(self.passwordWidget)
        self.passwordLabel.setMinimumSize(QtCore.QSize(59, 30))
        self.passwordLabel.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.passwordLabel.setFont(font)
        self.passwordLabel.setStyleSheet("#passwordLabel {\n"
        "    color: #f0f0f0;  \n"
        "}")
        self.passwordLabel.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft)
        self.passwordLabel.setObjectName("passwordLabel")
        self.verticalLayout_3.addWidget(self.passwordLabel)
        self.passwordAndButtonsWidget = QtWidgets.QWidget(self.passwordWidget)
        self.passwordAndButtonsWidget.setMaximumSize(QtCore.QSize(805, 16777215))

        self.passwordAndButtonsWidget.setObjectName("passwordAndButtonsWidget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.passwordAndButtonsWidget)
        self.horizontalLayout_3.setContentsMargins(0, -1, 0, -1)
        self.horizontalLayout_3.setSpacing(128)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.suggestedWidget = QtWidgets.QWidget(self.passwordAndButtonsWidget)
        self.suggestedWidget.setMaximumSize(QtCore.QSize(512, 16777215))
        self.suggestedWidget.setObjectName("suggestedWidget")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.suggestedWidget)
        self.horizontalLayout_7.setContentsMargins(0, 0, -1, -1)
        self.horizontalLayout_7.setSpacing(45)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")

        self.passwordInputWidget = QtWidgets.QWidget(self.suggestedWidget)

        self.passwordInputWidget.setMinimumSize(QtCore.QSize(300, 50))
        self.passwordInputWidget.setMaximumSize(QtCore.QSize(300, 50))
        self.passwordInputWidget.setStyleSheet("#passwordInputWidget {\n"
        "    border: 1px solid #cecece;\n"
        "    border-radius: 10px;\n"
        "}")
        self.passwordInputWidget.setObjectName("passwordInputWidget")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.passwordInputWidget)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")

        self.passwordPlainTextEdit = PasswordInput(self.passwordInputWidget)
        

        # self.passwordPlainTextEdit.textChanged.connect(self.handlePasswordValidation) # New: Connects textChanged signal for instant feedback.


        self.passwordPlainTextEdit.setMinimumSize(QtCore.QSize(280, 0))
        self.passwordPlainTextEdit.setMaximumSize(QtCore.QSize(280, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.passwordPlainTextEdit.setFont(font)
        self.passwordPlainTextEdit.setStyleSheet("#passwordPlainTextEdit {\n"
        "    background-color: #2c2c2c;\n"
        "    color: #f0f0f0;\n"
        "    border: none;\n"
        "}")
        self.passwordPlainTextEdit.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.passwordPlainTextEdit.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.passwordPlainTextEdit.setObjectName("passwordPlainTextEdit")
        self.horizontalLayout_5.addWidget(self.passwordPlainTextEdit)
        self.horizontalLayout_7.addWidget(self.passwordInputWidget)
        self.passwordGenerateButton = QtWidgets.QPushButton(self.suggestedWidget)
        self.passwordGenerateButton.setMinimumSize(QtCore.QSize(130, 0))
        self.passwordGenerateButton.setMaximumSize(QtCore.QSize(130, 50))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.passwordGenerateButton.setFont(font)
        self.passwordGenerateButton.setStyleSheet("""
        QPushButton {
                background-color: #1F5C94;       /* Green background */
                color: white;                    /* White text */
                border: none;                   /* No border */
                border-radius: 8px;             /* Rounded corners */
                padding: 10px 20px;             /* Vertical and horizontal padding */
                font-size: 16px;                /* Bigger font */
                font-weight: bold;              /* Bold text */
                margin-top: 4px;
        }
        QPushButton:hover {
                background-color: #3B84CC;      /* Slightly darker green on hover */
        }
        QPushButton:pressed {
                background-color: #3A8DDE;      /* Even darker green on press */
        }
        """)
        self.passwordGenerateButton.setObjectName("passwordGenerateButton")
        self.horizontalLayout_7.addWidget(self.passwordGenerateButton)
        self.horizontalLayout_3.addWidget(self.suggestedWidget)
        self.verticalLayout_3.addWidget(self.passwordAndButtonsWidget)


        # # START: Add the new password strength label
        # self.passwordStrengthLabel = QtWidgets.QLabel(self.passwordWidget)
        # self.passwordStrengthLabel.setMinimumSize(QtCore.QSize(0, 20))
        # self.passwordStrengthLabel.setMaximumSize(QtCore.QSize(16777215, 20))
        # font = QtGui.QFont()
        # font.setFamily("Segoe UI")
        # font.setPointSize(5) # Adjust font size as needed
        # self.passwordStrengthLabel.setFont(font)
        # # Default color (e.g., light grey) - will be overridden by strength logic
        # self.passwordStrengthLabel.setStyleSheet("QLabel { color: #f0f0f0; }")
        # self.passwordStrengthLabel.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        # self.passwordStrengthLabel.setObjectName("passwordStrengthLabel")
        # self.verticalLayout_3.addWidget(self.passwordStrengthLabel)
        # # END: Add the new password strength label


        self.convertFrame = QtWidgets.QWidget(self.centralwidget)
        self.convertFrame.setGeometry(QtCore.QRect(40, 120, 831, 291))
        self.convertFrame.setObjectName("convertFrame")
        self.comboBoxeswidget = QtWidgets.QWidget(self.convertFrame)
        self.comboBoxeswidget.setGeometry(QtCore.QRect(0, 0, 671, 61))
        self.comboBoxeswidget.setMinimumSize(QtCore.QSize(671, 61))
        self.comboBoxeswidget.setMaximumSize(QtCore.QSize(671, 61))
        self.comboBoxeswidget.setObjectName("comboBoxeswidget")
        self.fromComboBox = QtWidgets.QComboBox(self.comboBoxeswidget)
        self.fromComboBox.setGeometry(QtCore.QRect(11, 5, 200, 40))
        self.fromComboBox.setMinimumSize(QtCore.QSize(200, 40))
        self.fromComboBox.setMaximumSize(QtCore.QSize(200, 40))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.fromComboBox.setFont(font)

       

        self.fromComboBox.setObjectName("fromComboBox")
       
        self.toComboBox = QtWidgets.QComboBox(self.comboBoxeswidget)
        self.toComboBox.setGeometry(QtCore.QRect(449, 5, 200, 40))
        self.toComboBox.setMinimumSize(QtCore.QSize(200, 40))
        self.toComboBox.setMaximumSize(QtCore.QSize(200, 40))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)

         

        self.toComboBox.setFont(font)
        self.toComboBox.setObjectName("toComboBox")

        self.convertionWidget = QtWidgets.QWidget(self.convertFrame)
        self.convertionWidget.setGeometry(QtCore.QRect(0, 60, 831, 221))
        self.convertionWidget.setObjectName("convertionWidget")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.convertionWidget)
        self.horizontalLayout_4.setContentsMargins(10, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(14)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.fromStackedWidget = QtWidgets.QStackedWidget(self.convertionWidget)
        self.fromStackedWidget.setObjectName("fromStackedWidget")
        self.fromTextWidget = QtWidgets.QWidget()
        self.fromTextWidget.setObjectName("fromTextWidget")
        self.fromWidget_textTotext = QtWidgets.QWidget(self.fromTextWidget)
        self.fromWidget_textTotext.setGeometry(QtCore.QRect(0, 20, 372, 170))
        self.fromWidget_textTotext.setMinimumSize(QtCore.QSize(372, 170))
        self.fromWidget_textTotext.setMaximumSize(QtCore.QSize(372, 170))
        self.fromWidget_textTotext.setStyleSheet("QWidget {\n"
        "    border: 1px solid #3d3d3d;\n"
        "    border-radius: 10px;\n"
        "}\n"
        "QWidget:hover {\n"
        "       border: 1px solid #5a5a5a;\n"
        "}\n"
        "QWidget:focus {\n"
        "       border: 1px solid #ffffff;\n"
        "}\n"
        "")
        self.fromWidget_textTotext.setObjectName("fromWidget_textTotext")
        self.fromPlainTextEdit = QtWidgets.QPlainTextEdit(self.fromWidget_textTotext)
        self.fromPlainTextEdit.setGeometry(QtCore.QRect(10, 10, 353, 151))
        self.fromPlainTextEdit.setMinimumSize(QtCore.QSize(353, 151))
        self.fromPlainTextEdit.setMaximumSize(QtCore.QSize(353, 171))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.fromPlainTextEdit.setFont(font)
        self.fromPlainTextEdit.setStyleSheet("QPlainTextEdit {\n"
        "    border: none;\n"
        "    background-color: #2c2c2c;\n"
        "    color: white;\n"
        "    border-radius: 10px;\n"
        "}")
        self.fromPlainTextEdit.setObjectName("fromPlainTextEdit")
        self.fromStackedWidget.addWidget(self.fromTextWidget)
        self.fromImgWidget = QtWidgets.QWidget()
        self.fromImgWidget.setObjectName("fromImgWidget")
        self.toWidget_textToimg = QtWidgets.QWidget(self.fromImgWidget)
        self.toWidget_textToimg.setGeometry(QtCore.QRect(0, 20, 372, 170))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toWidget_textToimg.sizePolicy().hasHeightForWidth())
        self.toWidget_textToimg.setSizePolicy(sizePolicy)
        self.toWidget_textToimg.setMinimumSize(QtCore.QSize(372, 170))
        self.toWidget_textToimg.setMaximumSize(QtCore.QSize(372, 170))
        self.toWidget_textToimg.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.toWidget_textToimg.setAutoFillBackground(False)
        self.toWidget_textToimg.setStyleSheet("QWidget {\n"
        "    border: 1px solid #3d3d3d;\n"
        "    border-radius: 10px;\n"
        "}\n"
        "QWidget:hover {\n"
        "       border: 1px solid #5a5a5a;\n"
        "}\n"
        "QWidget:focus {\n"
        "       border: 1px solid #ffffff;\n"
        "}\n"
        "")
        self.toWidget_textToimg.setObjectName("toWidget_textToimg")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.toWidget_textToimg)
        self.verticalLayout_5.setContentsMargins(80, 0, 80, 0)
        self.verticalLayout_5.setSpacing(20)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.widget_4 = QtWidgets.QWidget(self.toWidget_textToimg)
        self.widget_4.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_4.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_4.setObjectName("widget_4")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.widget_4)
        self.verticalLayout_6.setContentsMargins(-1, 0, 47, -1)
        self.verticalLayout_6.setObjectName("verticalLayout_6")

        self.label_4 = QtWidgets.QLabel(self.widget_4)
        self.label_4.setMinimumSize(QtCore.QSize(0, 88))
        self.label_4.setMaximumSize(QtCore.QSize(120, 90))
        self.label_4.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("gui/HideMessage/icons/cloud-arrow-up-svgrepo-com.svg"))
        self.label_4.setScaledContents(True)
        self.label_4.setWordWrap(False)
        self.label_4.setObjectName("label_4")

        original_pixmap = QtGui.QPixmap("gui/HideMessage/icons/cloud-arrow-up-svgrepo-com.svg")
        colored_pixmap = colorize_pixmap(original_pixmap, "#3d3d3d")
        self.label_4.setPixmap(colored_pixmap)

        self.verticalLayout_6.addWidget(self.label_4)
        self.verticalLayout_5.addWidget(self.widget_4)
        self.widget_5 = QtWidgets.QWidget(self.toWidget_textToimg)
        self.widget_5.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_5.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_5.setObjectName("widget_5")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.widget_5)
        self.verticalLayout_7.setContentsMargins(55, 0, -1, -1)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.fromBrowseButton_img = QtWidgets.QPushButton(self.widget_5)
        self.fromBrowseButton_img.setMinimumSize(QtCore.QSize(100, 35))
        self.fromBrowseButton_img.setMaximumSize(QtCore.QSize(100, 35))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.fromBrowseButton_img.setFont(font)
        self.fromBrowseButton_img.setStyleSheet("QPushButton {\n"
        "    background-color: #7c7c7c;\n"
        "    color: white;\n"
        "}")
        self.fromBrowseButton_img.setObjectName("fromBrowseButton_img")
        self.verticalLayout_7.addWidget(self.fromBrowseButton_img)



        self.verticalLayout_5.addWidget(self.widget_5)
        self.fromStackedWidget.addWidget(self.fromImgWidget)
        self.horizontalLayout_4.addWidget(self.fromStackedWidget)

        self.arrowRightLabel = QtWidgets.QLabel(self.convertionWidget)
        self.arrowRightLabel.setMaximumSize(QtCore.QSize(32, 32))

        self.fromBrowseButton_img.setStyleSheet("""
        QPushButton {
        background-color: #3a3a3a;
        color: #f0f0f0;
        border: 1px solid #555555;
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: bold;
        }

        QPushButton:hover {
        background-color: #4a4a4a;
        border: 1px solid #666666;
        }

        QPushButton:pressed {
        background-color: #2a2a2a;
        border: 1px solid #888888;
        }
        """)
        self.arrowRightLabel.setText("")
        self.arrowRightLabel.setPixmap(QtGui.QPixmap("gui/HideMessage/icons/arrow-right-svgrepo-com.svg"))
        self.arrowRightLabel.setScaledContents(True)
        original_pixmap = QtGui.QPixmap("gui/HideMessage/icons/arrow-right-svgrepo-com.svg")
        colored_pixmap = colorize_pixmap(original_pixmap, "#3d3d3d")
        self.arrowRightLabel.setPixmap(colored_pixmap)
        self.arrowRightLabel.setObjectName("arrowRightLabel")

        self.horizontalLayout_4.addWidget(self.arrowRightLabel)
        self.toStackedWidget = QtWidgets.QStackedWidget(self.convertionWidget)
        self.toStackedWidget.setObjectName("toStackedWidget")
        self.toTextWidget = QtWidgets.QWidget()
        self.toTextWidget.setObjectName("toTextWidget")
        self.toWidget_textTotext = QtWidgets.QWidget(self.toTextWidget)
        self.toWidget_textTotext.setGeometry(QtCore.QRect(0, 20, 372, 170))
        self.toWidget_textTotext.setMinimumSize(QtCore.QSize(372, 170))
        self.toWidget_textTotext.setMaximumSize(QtCore.QSize(372, 170))
        self.toWidget_textTotext.setStyleSheet("QWidget {\n"
        "    border: 1px solid #3d3d3d;\n"
        "    border-radius: 10px;\n"
        "}\n"
        "QWidget:hover {\n"
        "       border: 1px solid #5a5a5a;\n"
        "}\n"
        "QWidget:focus {\n"
        "       border: 1px solid #ffffff;\n"
        "}\n"
        "")
        self.toWidget_textTotext.setObjectName("toWidget_textTotext")
        self.toPlainTextEdit = QtWidgets.QPlainTextEdit(self.toWidget_textTotext)
        self.toPlainTextEdit.setGeometry(QtCore.QRect(10, 10, 353, 151))
        self.toPlainTextEdit.setMinimumSize(QtCore.QSize(353, 151))
        self.toPlainTextEdit.setMaximumSize(QtCore.QSize(353, 171))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.toPlainTextEdit.setFont(font)
        self.toPlainTextEdit.setStyleSheet("QPlainTextEdit {\n"
        "    border: none;\n"
        "    background-color: #2c2c2c;\n"
        "    color: white;\n"
        "    border-radius: 10px;\n"
        "}"
        )
        self.toPlainTextEdit.setObjectName("toPlainTextEdit")
        self.toStackedWidget.addWidget(self.toTextWidget)
        self.toImgWidget = QtWidgets.QWidget()
        self.toImgWidget.setObjectName("toImgWidget")
        self.toWidget_Toimg = QtWidgets.QWidget(self.toImgWidget)
        self.toWidget_Toimg.setGeometry(QtCore.QRect(0, 20, 372, 170))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toWidget_Toimg.sizePolicy().hasHeightForWidth())
        self.toWidget_Toimg.setSizePolicy(sizePolicy)
        self.toWidget_Toimg.setMinimumSize(QtCore.QSize(372, 170))
        self.toWidget_Toimg.setMaximumSize(QtCore.QSize(372, 170))
        self.toWidget_Toimg.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.toWidget_Toimg.setAutoFillBackground(False)
        self.toWidget_Toimg.setStyleSheet("QWidget {\n"
        "    border: 1px solid #3d3d3d;\n"
        "    border-radius: 10px;\n"
        "}\n"
        "QWidget:hover {\n"
        "       border: 1px solid #5a5a5a;\n"
        "}\n"
        "QWidget:focus {\n"
        "       border: 1px solid #ffffff;\n"
        "}\n"
        "")
        self.toWidget_Toimg.setObjectName("toWidget_Toimg")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.toWidget_Toimg)
        self.verticalLayout_8.setContentsMargins(80, 0, 80, 0)
        self.verticalLayout_8.setSpacing(20)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.widget_6 = QtWidgets.QWidget(self.toWidget_Toimg)
        self.widget_6.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_6.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_6.setObjectName("widget_6")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.widget_6)
        self.verticalLayout_9.setContentsMargins(-1, 0, 47, -1)
        self.verticalLayout_9.setObjectName("verticalLayout_9")

        self.label_5 = QtWidgets.QLabel(self.widget_6)
        self.label_5.setMinimumSize(QtCore.QSize(0, 88))
        self.label_5.setMaximumSize(QtCore.QSize(120, 90))
        self.label_5.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap("gui/HideMessage/icons/cloud-arrow-up-svgrepo-com.svg"))
        self.label_5.setScaledContents(True)
        self.label_5.setWordWrap(False)
        self.label_5.setObjectName("label_5")

        original_pixmap_5 = QtGui.QPixmap("gui/HideMessage/icons/cloud-arrow-up-svgrepo-com.svg")
        colored_pixmap_5 = colorize_pixmap(original_pixmap_5, "#3d3d3d")
        self.label_5.setPixmap(colored_pixmap_5)

        self.verticalLayout_9.addWidget(self.label_5)
        self.verticalLayout_8.addWidget(self.widget_6)
        self.widget_7 = QtWidgets.QWidget(self.toWidget_Toimg)
        self.widget_7.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_7.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_7.setObjectName("widget_7")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.widget_7)
        self.verticalLayout_10.setContentsMargins(55, 0, -1, -1)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.toBrowseButton_img = QtWidgets.QPushButton(self.widget_7)
        self.toBrowseButton_img.setMinimumSize(QtCore.QSize(100, 35))
        self.toBrowseButton_img.setMaximumSize(QtCore.QSize(100, 35))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.toBrowseButton_img.setFont(font)
        self.toBrowseButton_img.setStyleSheet("""
        QPushButton {
        background-color: #3a3a3a;
        color: #f0f0f0;
        border: 1px solid #555555;
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: bold;
        }

        QPushButton:hover {
        background-color: #4a4a4a;
        border: 1px solid #666666;
        }

        QPushButton:pressed {
        background-color: #2a2a2a;
        border: 1px solid #888888;
        }
        """)

        self.toBrowseButton_img.setObjectName("toBrowseButton_img")



        self.verticalLayout_10.addWidget(self.toBrowseButton_img)
        self.verticalLayout_8.addWidget(self.widget_7)
        self.toStackedWidget.addWidget(self.toImgWidget)
        self.toAudioWidget = QtWidgets.QWidget()
        self.toAudioWidget.setObjectName("toAudioWidget")
        self.toWidget_textToaudio = QtWidgets.QWidget(self.toAudioWidget)
        self.toWidget_textToaudio.setGeometry(QtCore.QRect(0, 20, 372, 170))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toWidget_textToaudio.sizePolicy().hasHeightForWidth())
        self.toWidget_textToaudio.setSizePolicy(sizePolicy)
        self.toWidget_textToaudio.setMinimumSize(QtCore.QSize(372, 170))
        self.toWidget_textToaudio.setMaximumSize(QtCore.QSize(372, 170))
        self.toWidget_textToaudio.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.toWidget_textToaudio.setAutoFillBackground(False)
        self.toWidget_textToaudio.setStyleSheet("QWidget {\n"
        "    border: 1px solid #3d3d3d;\n"
        "    border-radius: 10px;\n"
        "}"
        "QWidget:hover {\n"
        "       border: 1px solid #5a5a5a;\n"
        "}\n"
        "QWidget:focus {\n"
        "       border: 1px solid #ffffff;\n"
        "}\n"
        "")
        self.toWidget_textToaudio.setObjectName("toWidget_textToaudio")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.toWidget_textToaudio)
        self.verticalLayout_11.setContentsMargins(80, 0, 80, 0)
        self.verticalLayout_11.setSpacing(20)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.widget_8 = QtWidgets.QWidget(self.toWidget_textToaudio)
        self.widget_8.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_8.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_8.setObjectName("widget_8")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.widget_8)
        self.verticalLayout_12.setContentsMargins(-1, 0, 47, -1)
        self.verticalLayout_12.setObjectName("verticalLayout_12")

        self.label_6 = QtWidgets.QLabel(self.widget_8)
        self.label_6.setMinimumSize(QtCore.QSize(0, 88))
        self.label_6.setMaximumSize(QtCore.QSize(120, 90))
        self.label_6.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_6.setText("")
        self.label_6.setPixmap(QtGui.QPixmap("gui/HideMessage/icons/audio-svgrepo-com.svg"))
        self.label_6.setScaledContents(True)
        self.label_6.setWordWrap(False)
        self.label_6.setObjectName("label_6")

        original_pixmap_6 = QtGui.QPixmap("gui/HideMessage/icons/audio-svgrepo-com.svg")
        colored_pixmap_6 = colorize_pixmap(original_pixmap_6, "#3d3d3d")
        self.label_6.setPixmap(colored_pixmap_6)

        self.verticalLayout_12.addWidget(self.label_6)
        self.verticalLayout_11.addWidget(self.widget_8)
        self.widget_9 = QtWidgets.QWidget(self.toWidget_textToaudio)
        self.widget_9.setMaximumSize(QtCore.QSize(16777215, 88))
        self.widget_9.setStyleSheet("QWidget {\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QLabel {\n"
        "    border: none;\n"
        "}")
        self.widget_9.setObjectName("widget_9")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.widget_9)
        self.verticalLayout_13.setContentsMargins(55, 0, -1, -1)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.toBrowseButton_audio = QtWidgets.QPushButton(self.widget_9)
        self.toBrowseButton_audio.setMinimumSize(QtCore.QSize(100, 35))
        self.toBrowseButton_audio.setMaximumSize(QtCore.QSize(100, 35))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.toBrowseButton_audio.setFont(font)

        self.toBrowseButton_audio.clicked.connect(self.browseToAudioFile)


        self.toBrowseButton_audio.setStyleSheet("""
        QPushButton {
        background-color: #3a3a3a;
        color: #f0f0f0;
        border: 1px solid #555555;
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: bold;
        }

        QPushButton:hover {
        background-color: #4a4a4a;
        border: 1px solid #666666;
        }

        QPushButton:pressed {
        background-color: #2a2a2a;
        border: 1px solid #888888;
        }
        """)

        self.toBrowseButton_audio.setObjectName("toBrowseButton_audio")
        self.verticalLayout_13.addWidget(self.toBrowseButton_audio)
        self.verticalLayout_11.addWidget(self.widget_9)
        self.toStackedWidget.addWidget(self.toAudioWidget)
        self.horizontalLayout_4.addWidget(self.toStackedWidget)
        self.filePathWidget = QtWidgets.QWidget(self.centralwidget)
        self.filePathWidget.setGeometry(QtCore.QRect(40, 465, 831, 47))
        self.filePathWidget.setMinimumSize(QtCore.QSize(831, 47))
        self.filePathWidget.setMaximumSize(QtCore.QSize(831, 47))
        self.filePathWidget.setStyleSheet("QWidget {\n"
        "    color: #f0f0f0;\n"
        "\n"
        "}")
        self.filePathWidget.setObjectName("filePathWidget")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.filePathWidget)
        self.horizontalLayout_6.setContentsMargins(10, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.yourFileLabel = QtWidgets.QLabel(self.filePathWidget)
        self.yourFileLabel.setMinimumSize(QtCore.QSize(90, 25))
        self.yourFileLabel.setMaximumSize(QtCore.QSize(90, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        self.yourFileLabel.setFont(font)
        self.yourFileLabel.setStyleSheet("QLabel {\n"
        "    color: #f0f0f0;\n"
        "}")
        self.yourFileLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.yourFileLabel.setObjectName("yourFileLabel")
        self.horizontalLayout_6.addWidget(self.yourFileLabel)
        self.pathLabel = QtWidgets.QLabel(self.filePathWidget)
        self.pathLabel.setMinimumSize(QtCore.QSize(0, 25))
        self.pathLabel.setMaximumSize(QtCore.QSize(16777215, 25))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.pathLabel.setFont(font)
        self.pathLabel.setStyleSheet("QLabel {\n"
        "    color: #f0f0f0;\n"
        "}")
        self.pathLabel.setObjectName("pathLabel")
        self.horizontalLayout_6.addWidget(self.pathLabel)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(50, 412, 115, 40))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("""
                QPushButton {
                background-color: #3a3a3a;
                color: #f0f0f0;
                border: 1px solid #555555;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: bold;
                }

                QPushButton:hover {
                background-color: #4a4a4a;
                border: 1px solid #666666;
                }

                QPushButton:pressed {
                background-color: #2a2a2a;
                border: 1px solid #888888;
                }
                """)

        self.pushButton.setObjectName("pushButton")
        self.saveButton = QtWidgets.QPushButton(self.centralwidget)
        self.saveButton.setGeometry(QtCore.QRect(700, 590, 150, 55))
        self.saveButton.setMinimumSize(QtCore.QSize(0, 55))
        self.saveButton.setMaximumSize(QtCore.QSize(150, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.saveButton.setFont(font)
        self.saveButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.saveButton.setStyleSheet("""
                QPushButton {
                        background: qlineargradient(
                        x1:0, y1:0, x2:1, y2:0, 
                        stop:0 #6a11cb, 
                        stop:1 #2575fc
                        );
                        color: white;
                        border: none;
                        border-radius: 8px;
                        padding: 12px 24px;
                        font-size: 16px;
                        font-weight: 600;
                }
                QPushButton:hover {
                        background: qlineargradient(
                        x1:0, y1:0, x2:1, y2:0,
                        stop:0 #7b33d9,
                        stop:1 #2d85ff
                        );
                }
                QPushButton:pressed {
                        background: qlineargradient(
                        x1:0, y1:0, x2:1, y2:0,
                        stop:0 #4a0e9a,
                        stop:1 #1b4ecc
                        );
                }
        """)
        self.saveButton.setObjectName("saveButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 900, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.fromStackedWidget.setCurrentIndex(1)
        self.toStackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


        self.fromComboBox.addItem("Text")
        self.fromComboBox.addItem("Image")

        self.toComboBox.addItem("Text")
        self.toComboBox.addItem("Image")
        self.toComboBox.addItem("Audio")

        


        # Connect signal and update toComboBox after adding initial items
        self.fromComboBox.currentTextChanged.connect(self.updateToComboBox)
        self.updateToComboBox(self.fromComboBox.currentText())
        self.toComboBox.currentTextChanged.connect(self.updateToStackedWidget)


        # Store paths
        self.selected_from_image_path = None
        self.selected_to_image_path = None

        # Connect buttons (update these with your actual object names if different)
        self.fromBrowseButton_img.clicked.connect(self.browseFromImageFile)
        self.toBrowseButton_img.clicked.connect(self.browseToImageFile)
        self.pushButton.clicked.connect(self.handleEncoding)
        self.passwordGenerateButton.clicked.connect(self.suggest_password)




    def handleEncoding(self):
        from_format = self.fromComboBox.currentText()
        to_format = self.toComboBox.currentText()

        if from_format == "Image" and to_format == "Image":
            self.encodeImage()

        elif from_format == "Text" and to_format == "Text":
            self.encodeTextToText()

        elif from_format == "Text" and to_format == "Image":
            self.encodeTextToImage()

        elif from_format == "Text" and to_format == "Audio":
            self.encodeTextToAudio()

        else:
            # Corrected line: Use self.centralwidget as the parent widget
            # self.centralwidget is a valid QWidget that exists within your UI_MainWindow setup.
            QtWidgets.QMessageBox.warning(self.centralwidget, "Unsupported Option",
                                        f"Encoding from '{from_format}' to '{to_format}' is not supported.")



    def encodeTextToImage(self):
        """
        Encodes text into a selected image file with optional password protection.
        """
        try:
            secret_message = self.fromPlainTextEdit.toPlainText()
            # Directly get the password from the plaintext edit field.
            # .strip() removes leading/trailing whitespace.
            password = self.passwordPlainTextEdit.toPlainText().strip()

        except Exception as e:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", f"Failed to read secret message or password: {e}")
            return

        if not secret_message.strip():
            QtWidgets.QMessageBox.warning(self.MainWindow, "Empty Text", "Please enter a secret message.")
            return

        if not hasattr(self, 'selected_to_image_path') or not self.selected_to_image_path:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Missing Image", "Please select a host image file.")
            return

        output_path, _ = QtWidgets.QFileDialog.getSaveFileName(
                self.MainWindow, # Use self.MainWindow as parent for the file dialog
                "Save Output Image",
                "",
                "PNG Files (*.png);;All Files (*)"
        )
        if not output_path:
                return

        try:
            # Use the StegoTextPass instance to encode text into image with password
            # Defaulting to "Strong" for the algorithm label as there's no UI selection for it yet.
            self.text_encoder.encode_text_with_password(
                file_path=self.selected_to_image_path, # Host image path
                message=secret_message,
                password=password, # Pass the password (can be empty if user didn't enter one)
                algo_label="Strong", # Defaulting to "Strong" (AES) encryption for the password
                output_path=output_path
            )
            # Adjust success message based on whether a password was used
            if password:
                QtWidgets.QMessageBox.information(self.MainWindow, "Success", "Message encoded successfully into image and password was set!")
            else:
                QtWidgets.QMessageBox.information(self.MainWindow, "Success", "Message encoded successfully into image!")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self.MainWindow, "Error", f"Encoding failed: {str(e)}")

        self.pathLabel.setText(f"Saved: {output_path}")
    


    def encodeTextToText(self):
        try:
                secret_message = self.fromPlainTextEdit.toPlainText()
        except Exception as e:
                QtWidgets.QMessageBox.warning(None, "Error", f"Failed to read secret message: {e}")
                return

        if not secret_message.strip():
                QtWidgets.QMessageBox.warning(None, "Empty Text", "Please enter a secret message.")
                return

        # Encode using ReverseCrypt
        try:
                encrypted_text = self.text_steganography.Encrypt(secret_message)
        except Exception as e:
                QtWidgets.QMessageBox.critical(None, "Error", f"Text encoding failed: {str(e)}")
                return

        # Display the result in the output text area
        self.toPlainTextEdit.setPlainText(encrypted_text)



    def suggest_password(self):
        protector = PasswordProtection()
        suggested = protector.generate_password()
        self.passwordPlainTextEdit.setPlainText(suggested)


    def encodeTextToAudio(self):
        """
        Encodes text into a selected audio file with optional password protection.
        """
        try:
                secret_message = self.fromPlainTextEdit.toPlainText()
                # Directly get the password from the plaintext edit field.
                password = self.passwordPlainTextEdit.toPlainText().strip()

        except Exception as e:
                QtWidgets.QMessageBox.warning(self.MainWindow, "Error", f"Failed to read secret message or password: {e}")
                return

        if not secret_message.strip():
                QtWidgets.QMessageBox.warning(self.MainWindow, "Empty Text", "Please enter a secret message.")
                return

        if not hasattr(self, 'selected_to_audio_path') or not self.selected_to_audio_path:
                QtWidgets.QMessageBox.warning(self.MainWindow, "Missing Audio", "Please select a host audio file.")
                return

        output_path, _ = QtWidgets.QFileDialog.getSaveFileName(
                self.MainWindow, # Use self.MainWindow as parent for the file dialog
                "Save Output Audio",
                "",
                "MP3 Files (*.mp3);;WAV Files (*.wav);;All Files (*)" # Added WAV for more flexibility
        )
        if not output_path:
                return

        try:
            # Use the StegoTextPass instance to encode text into audio with password
            # Defaulting to "Strong" for the algorithm label.
            self.text_encoder.encode_audio_with_password(
                file_path=self.selected_to_audio_path, # Host audio path
                message=secret_message,
                password=password, # Pass the password (can be empty)
                algo_label="Strong", # Defaulting to "Strong" (AES) encryption for the password
                output_path=output_path
            )
            # Adjust success message based on whether a password was used
            if password:
                QtWidgets.QMessageBox.information(self.MainWindow, "Success", "Message encoded successfully into audio and password was set!")
            else:
                QtWidgets.QMessageBox.information(self.MainWindow, "Success", "Message encoded successfully into audio!")

        except Exception as e:
                QtWidgets.QMessageBox.critical(self.MainWindow, "Error", f"Audio encoding failed: {str(e)}")

        self.pathLabel.setText(f"Saved: {output_path}")




    def browseFromImageFile(self):
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Secret Image", "", "Image Files (*.png);;All Files (*)")
        if file_path:
                self.selected_from_image_path = file_path
                print("Selected secret image:", file_path)

    def browseToImageFile(self):
        print(type(self))
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(self.MainWindow, "Select Host Image", "", "Image Files (*.png);;All Files (*)")
        if file_path:
                self.selected_to_image_path = file_path
                print("Selected host image:", file_path)


    def encodeImage(self):
        """
        Encodes a secret image into a host image with optional password protection.
        """
        try:
            # Directly get the password from the plaintext edit field.
            password = self.passwordPlainTextEdit.toPlainText().strip()
        except Exception as e:
            QtWidgets.QMessageBox.warning(self.MainWindow, "Error", f"Failed to retrieve password: {e}")
            return

        if not self.selected_from_image_path or not self.selected_to_image_path:
                QtWidgets.QMessageBox.warning(self.MainWindow, "Missing Images", "Please select both images before encoding.")
                return

        output_path, _ = QtWidgets.QFileDialog.getSaveFileName(self.MainWindow, "Save Output Image", "", "PNG Files (*.png);;All Files (*)")
        if not output_path:
                return

        try:
            # Use the StegoTextPass instance to encode image into image with password
            # Defaulting to "Strong" for the algorithm label.
            self.text_encoder.encode_image_with_password(
                file_path=self.selected_to_image_path, # Host image path
                content_path=self.selected_from_image_path, # Secret image path
                password=password, # Pass the password (can be empty)
                algo_label="Strong", # Defaulting to "Strong" (AES) encryption for the password
                output_path=output_path
            )
            # Adjust success message based on whether a password was used
            if password:
                QtWidgets.QMessageBox.information(self.MainWindow, "Success", "Image encoded successfully into image and password was set!")
            else:
                QtWidgets.QMessageBox.information(self.MainWindow, "Success", "Image encoded successfully into image!")

        except Exception as e:
            QtWidgets.QMessageBox.critical(self.MainWindow, "Error", f"Image encoding failed: {str(e)}")

        self.pathLabel.setText(f"Saved: {output_path}")
        print("Output saved to:", output_path)



    # to audio browse variable
    def browseToAudioFile(self):
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                self.MainWindow,  # or whatever your main window widget reference is
                "Select Audio File",
                "",
                "Audio Files (*.mp3);;All Files (*)"
        )
        if file_path:
                self.selected_to_audio_path = file_path
                print("Selected TO audio file:", file_path)


    

    def updateToStackedWidget(self, to_format):
        if to_format == "Text":
                self.toStackedWidget.setCurrentWidget(self.toTextWidget)
        elif to_format == "Image":
                self.toStackedWidget.setCurrentWidget(self.toImgWidget)
        elif to_format == "Audio":
                self.toStackedWidget.setCurrentWidget(self.toAudioWidget)


    def updateToComboBox(self, selected_text):
        # Temporarily block signals from toComboBox
        self.toComboBox.blockSignals(True)

        self.toComboBox.clear()

        if selected_text == "Text":
            self.toComboBox.addItems(["Text", "Image", "Audio"])
            self.fromStackedWidget.setCurrentWidget(self.fromTextWidget)
        elif selected_text == "Image":
            self.toComboBox.addItem("Image")
            self.fromStackedWidget.setCurrentWidget(self.fromImgWidget)

        # Unblock signals from toComboBox
        self.toComboBox.blockSignals(False)

        # Manually emit the signal if you want updateToStackedWidget to run
        # after the items have been added and a new current item is set.
        # This ensures updateToStackedWidget is called only once after the update.
        self.toComboBox.currentTextChanged.emit(self.toComboBox.currentText())


        

    def handleFromComboBoxChange(self, selected_text):

        # Update toComboBox items
        self.toComboBox.clear()
        if selected_text == "Text":
                self.toComboBox.addItems(["Text", "Image", "Audio"])
                self.fromStackedWidget.setCurrentWidget(self.fromTextWidget)
        elif selected_text == "Image":
                self.toComboBox.addItem("Image")
                self.fromStackedWidget.setCurrentWidget(self.fromImgWidget)

     



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Whisper"))
        self.passwordLabel.setText(_translate("MainWindow", "Password (optional):"))
        self.passwordPlainTextEdit.setPlaceholderText(_translate("MainWindow", "password..."))
        self.passwordGenerateButton.setText(_translate("MainWindow", "Suggested..."))
        self.fromPlainTextEdit.setPlaceholderText(_translate("MainWindow", "Enter your text..."))
        self.fromBrowseButton_img.setText(_translate("MainWindow", "Browse"))
        self.toPlainTextEdit.setPlaceholderText(_translate("MainWindow", ". . ."))
        self.toBrowseButton_img.setText(_translate("MainWindow", "Browse"))
        self.toBrowseButton_audio.setText(_translate("MainWindow", "Browse"))
        self.yourFileLabel.setText(_translate("MainWindow", "Your file: "))
        self.pathLabel.setText(_translate("MainWindow", "Path///"))
        self.pushButton.setText(_translate("MainWindow", "Convert"))
        self.saveButton.setText(_translate("MainWindow", "Save"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
